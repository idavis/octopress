---
layout: post
title: "Project Euler: Problem 2 in PowerShell"
date: 2012-08-25 20:00:58
comments: true
categories: [powerhell, projecteuler]
published: false
---
{% blockquote Project Euler http://projecteuler.net/problem=2 Problem 2 %}
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
{% endblockquote %}

The [Fibonacci sequence][] is much more fun. You can get close to this implementation with `yield return` in C#, but the multiple assignment trick has yet to come to C# :(.

``` ps1 Find the sum of the even-valued terms in the Fibonacci sequence whose values do not exceed four million
function Get-FibonacciSequence {
  param([int]$max)
  0
  1
  for($i = $j = 1; $i -lt $max) {
    $i
    $i,$j = ($i + $j),$i
   }
}

filter Select-EvenValues { if($_ % 2 -eq 0) { $_ } }

function Solve-Problem2 {
  $upperBound = 4000000
  $evenValues = (Get-FibonacciSequence $upperBound) | Select-EvenValues
  ($evenValues | Measure-Object -Sum).Sum
}

Write-Host "Elapsed Time (s): " (Measure-Command {Solve-Problem2}).TotalSeconds
Write-Host "Solution: " (Solve-Problem2)

Elapsed Time (s):  0.0049869
Solution:  4613732
```

  [Fibonacci sequence]: http://en.wikipedia.org/wiki/Fibonacci_number